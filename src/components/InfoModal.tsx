import useData from "../hooks/useData";
import {Player} from '@lottiefiles/react-lottie-player';
import {useEffect, useState} from "react";
import {levels} from "../hooks/useLevel";
import CloseButtonSvg from './svg/CloseButton';
import BackgroundPaperSvg from './svg/BackgroundPaper';

export default function InfoModal() {
  const {level, showTutorial, setShowTutorial} = useData();
  const [levelOffset, setLevelOffset] = useState(0);

  useEffect(() => {
    if (level !== selectedLevel) {
      setLevelOffset(0);
    }
  }, [showTutorial]);

  useEffect(() => {
    const handleKeyDown = (ev: KeyboardEvent) => {
      if (ev.key === 'Escape') {
        setShowTutorial(false);
      }
    };
    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  function handleOffset(offset: number) {
    const newOffset = levelOffset + offset;
    const newLevel = level + newOffset;
    const newLevelLookupIndex = newLevel - 1;
    if(newLevelLookupIndex >= 0 && newLevelLookupIndex < levels.length){
      setLevelOffset(newOffset);
    }
    console.log('Cannot set offset to', newOffset, 'because it is out of bounds');
  }

  const selectedLevel = level + levelOffset;
  const levelLookupIndex = selectedLevel - 1;
  const data = levels[levelLookupIndex];

  if (!showTutorial) return null;

  return (
    <div className={'modal'}>
      <div style={{ position: 'absolute', width: 700, height:700, top: '50%', right: '50%', transform: 'translate(50%,-50%)', display:'flex', justifyContent:'center', alignItems:'center', paddingTop: 60, paddingRight: 40, paddingLeft: 50, paddingBottom: 15}}>
        {/* Background Paper */}
        <div style={{ position: 'absolute', width: '100%', height:'100%', top: 0, right: 0,}}>
          <BackgroundPaperSvg />
        </div>
        {/* Close Button */}
        <div style={{position: 'absolute', top: 20, left: 35, height: 50, display:'flex', flexDirection: 'row'}}>
          <div className={'button'} onClick={() => setShowTutorial(false)} style={{width: 50, height: 50}}>
            <CloseButtonSvg />
          </div>
        </div>
        {/* Navigation  */
          // The styling is a bit messy here, but it works :D
        }
        <div style={{zIndex: 1001, position: 'absolute', bottom: 20, left: 0, height: 50, width:'100%', display:'flex', flexDirection: 'row', justifyContent: levelLookupIndex > 0 && selectedLevel < level ? 'space-between': selectedLevel < level ? 'flex-end':'flex-start', paddingLeft: 75, paddingRight: 60}}>
          { levelLookupIndex > 0 && (<div className={'button'} onClick={() => handleOffset(-1)} style={{width: 50, height: 50}}>
            <LeftNavArrowSvg />
          </div>)}
          { selectedLevel < level && (<div className={'button'} onClick={() => handleOffset(1)} style={{width: 50, height: 50}}>
            <RightNavArrowSvg />
          </div>)}
        </div>
        {/* Info part */}
        <div className={'modalInfoContainer'}>
          {/* Title */}
          <h3 className={'headerText'}>{data.title}</h3>
          {/* Description */}
          <div style={{display:'flex', alignItems: 'center', flexDirection: 'column', gap: 20}}>
            {data.descriptions.map((description, index) => {
              if (description.type === 'text') {
                return <p key={index} style={{textAlign:'left', width:'90%', fontSize: '1.5rem'}}>{description.content}</p>
              }
              else if (description.type === 'image') {
                return <img key={index} src={description.content} alt={'illustration'} style={{width: '70%', height: "auto", marginBottom: 40}}/>
              }
              else if (description.type === 'lottieAnimation') {
                return <Player className="player" src={description.content} loop autoplay style={{ width: '70%' }}/>
              }
              else if (description.type === 'svgAnimation') {
                return null
              }
              else return  null
            })}
            <div className={'bottomGradient'}/>
          </div>
        </div>
      </div>
    </div>
  )};

function LeftNavArrowSvg() {
  return (
    <svg viewBox="0 0 93 93" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g filter="url(#filter0_d_188_1393)">
        <path d="M79.1553 37.4181C81.1266 55.6413 65.3559 71.0783 46.5524 70.1747C29.341 69.6476 13.5703 55.4416 13.5703 37.2675C18.5745 7.22179 33.3595 2.92952 46.5524 4.36029C64.8516 4.36029 79.1553 19.244 79.1553 37.4181Z" fill="#E2E2E2"/>
      </g>
      <path d="M40.259 3.25587C35.1234 3.97877 29.7856 6.1274 26.0855 8.9387C23.8412 10.6456 20.8691 13.7179 19.4335 15.8464C18.1799 17.6738 15.8346 22.2522 15.4302 23.6377C15.3291 24.0193 15.046 24.9631 14.8236 25.7462C13.5903 29.9431 12.9433 33.7584 13.0039 36.4492C13.0241 38.0155 13.0443 38.0757 13.1454 37.0918C13.2465 36.1681 13.3072 36.4291 13.4487 38.6982C13.6711 42.1722 13.8935 44.7024 13.9542 44.3208C14.0149 43.7787 14.2979 44.5016 14.8843 46.7908C16.7242 54.06 21.1117 60.2448 27.2987 64.3212C29.7451 65.9276 31.302 66.6706 34.2944 67.6345C35.7501 68.0964 37.2463 68.5984 37.6305 68.7389L38.3382 69H37.6305C36.842 69.0201 35.1234 68.5984 34.4157 68.2369C34.1731 68.0964 33.8091 67.9558 33.6272 67.9156C32.8993 67.755 29.7856 66.3694 28.8353 65.767C28.2894 65.4256 27.5008 64.9638 27.1167 64.7429C26.0249 64.1204 24.3871 62.7348 22.1631 60.6063C19.8177 58.3572 19.4133 57.9155 19.3526 57.5138C19.3324 57.3733 18.928 56.7909 18.463 56.2488C17.998 55.7066 17.6138 55.1644 17.6138 55.064C17.6138 54.9435 17.4318 54.5017 17.2094 54.06C16.987 53.6182 16.8051 53.1965 16.8051 53.0961C16.8051 52.9957 16.6433 52.6744 16.4411 52.3933C15.9154 51.6302 15.2482 49.7426 14.6619 47.4133C14.2373 45.6462 14.1968 45.5658 14.2979 46.6301C14.4597 48.2566 15.5919 51.59 16.8455 54.1403C19.5346 59.6022 24.5691 64.4015 30.655 67.2931C36.5387 70.1044 42.2808 71.2089 49.7618 70.9679C54.857 70.7872 58.3346 69.9237 62.5199 67.7751C67.7769 65.0642 71.4163 61.6505 75.3387 55.7668C78.2705 51.3692 79.8071 47.8952 80.6361 43.8991C81.1213 41.4895 81.1213 36.0677 80.6361 33.3769C79.6049 27.8748 76.936 22.2923 72.7507 16.8706C72.3868 16.4087 71.76 15.5452 71.3354 14.9629C69.5966 12.493 65.1282 8.55716 62.7019 7.33224C62.1964 7.07119 61.5697 6.72982 61.2866 6.5491C60.5183 6.08724 57.9707 5.08321 55.9286 4.46071C54.9379 4.1595 53.9674 3.87837 53.8056 3.81813C51.3187 3.05506 43.8377 2.73377 40.259 3.25587ZM42.6852 4.44063C42.6852 4.48079 42.018 4.62135 41.2295 4.76192C37.7316 5.32418 33.1824 7.23184 29.4419 9.70176C27.5211 10.9668 22.7292 14.9227 20.9499 16.6898L19.3324 18.3164L20.3231 16.9107C20.8691 16.1477 21.6374 15.1235 22.0417 14.6215C23.174 13.236 26.3484 10.1837 27.0156 9.84233C27.3593 9.6616 28.0265 9.21983 28.532 8.83829C30.7156 7.1716 35.9321 5.20369 39.4502 4.68159C41.4721 4.40047 42.6852 4.30006 42.6852 4.44063ZM52.087 5.68563C53.199 5.86635 54.2504 6.06716 54.4122 6.1274C54.8368 6.28805 54.857 6.28805 55.5242 6.46877C56.98 6.85031 59.75 8.11539 62.7221 9.74192C64.5216 10.7259 68.6665 13.6978 68.8485 14.1597C68.9091 14.3002 68.4845 14.0593 67.8982 13.6175C63.814 10.5853 57.9707 8.17563 52.6329 7.33224C47.5175 6.50894 40.7846 6.79006 36.478 7.97482C34.6583 8.47684 34.4966 8.47684 35.4671 7.95474C36.8217 7.23184 42.1393 5.58522 43.6962 5.4045C45.6776 5.16353 49.5596 5.28401 52.087 5.68563ZM48.8115 8.17563C53.4012 8.55716 58.4357 9.88249 62.0953 11.6897C63.3287 12.2922 64.7036 13.0552 65.1888 13.3966C65.6539 13.738 66.5435 14.3605 67.1501 14.7822C68.0801 15.4448 70.5266 17.7541 72.0228 19.3405C72.5485 19.9228 74.2873 22.5534 74.7726 23.5373C76.0868 26.1478 77.0371 31.0877 77.1584 35.887C77.2191 38.1561 76.8551 41.8308 76.471 43.0156C76.3699 43.3369 76.1677 44.3008 76.0464 45.104C75.9251 45.9273 75.6622 46.9715 75.46 47.4133C75.2578 47.8751 75.0354 48.4775 74.9748 48.7787C74.6108 50.1643 71.8813 55.2447 70.8299 56.4696C70.6479 56.6905 70.284 57.1323 70.0211 57.4737C69.455 58.1966 64.926 62.7951 64.744 62.8151C64.1779 62.8754 63.915 63.0159 63.4702 63.4577C62.4997 64.4216 57.6674 66.6104 54.8772 67.3333C53.0373 67.8152 52.6127 67.9759 53.3608 67.9156C55.2614 67.7148 58.2538 66.7108 61.2664 65.2248C67.6758 62.1123 73.1955 55.6062 75.9453 47.9554C77.1584 44.5618 78.048 39.3609 78.0683 35.6058C78.0683 34.7223 78.1289 34.0596 78.1896 34.1399C78.3513 34.3006 78.3109 41.6903 78.1491 42.9152C77.6841 46.4695 76.8956 49.3611 75.642 52.0519C73.984 55.6664 73.0944 57.2327 71.8408 58.7789C70.4255 60.5059 66.8063 63.8392 65.7954 64.3613C65.4719 64.522 65.0473 64.8031 64.8249 65.0039C64.1375 65.5863 62.3784 66.5702 61.4686 66.8915C60.9833 67.0522 60.0735 67.3935 59.4669 67.6345C58.8603 67.8554 57.9505 68.1767 57.445 68.3373C56.9395 68.4779 55.9488 68.7791 55.2209 69.0201C53.0777 69.6827 44.424 69.8434 44.8284 69.2008C44.8891 69.1004 44.5251 69.0201 44.0399 69.0201C41.836 69.0201 36.8217 67.1124 33.1217 64.8834C28.6331 62.1525 24.5691 58.2769 21.6172 53.8592C20.3838 52.0117 17.6138 46.8309 17.6138 46.3691C17.6138 46.2687 17.351 45.3249 17.0275 44.3008C15.6728 39.9232 15.4504 34.2604 16.4816 30.0636C17.3914 26.3687 17.5734 25.8667 18.928 23.3165C21.0308 19.4007 24.5085 15.1838 27.1167 13.3966C31.2009 10.6255 37.3474 8.65757 43.3929 8.19571C46.3044 7.95474 46.2033 7.95474 48.8115 8.17563ZM70.3851 15.5051C70.6479 15.7862 70.8097 16.0071 70.749 16.0071C70.7086 16.0071 70.4457 15.7862 70.1829 15.5051C69.9201 15.2239 69.7583 15.0031 69.819 15.0031C69.8594 15.0031 70.1222 15.2239 70.3851 15.5051ZM78.8972 28.8587C80.0093 32.1319 80.4743 35.2845 80.5147 39.6019C80.535 42.1722 80.4743 43.1963 80.3126 43.3168C80.171 43.3971 80.0295 43.9393 79.9688 44.5417C79.9082 45.1441 79.6858 46.0679 79.4836 46.6301C79.2612 47.1723 78.9983 48.0358 78.8568 48.5378C78.6142 49.5016 77.3202 52.2929 77.0371 52.4736C76.936 52.5338 77.0371 52.1925 77.2393 51.7105C78.6546 48.3771 79.4634 44.5819 79.6251 40.4051C79.8677 34.2403 78.877 28.939 76.6529 24.3205C76.4305 23.8787 76.2486 23.4169 76.2688 23.3165C76.289 22.9952 78.4322 27.5133 78.8972 28.8587ZM78.0076 33.7182C77.9469 33.8789 77.8863 33.8186 77.8863 33.5978C77.8661 33.3769 77.9267 33.2564 77.9874 33.3367C78.048 33.397 78.0683 33.5777 78.0076 33.7182ZM17.9373 50.2848C20.2625 55.064 24.8724 60.6464 28.997 63.6585C30.473 64.7429 30.6954 64.9838 29.7249 64.4818C27.7839 63.4979 24.65 60.787 21.7789 57.6142C20.5253 56.2086 18.2406 52.3531 17.4723 50.345C16.5422 47.9153 15.7941 45.6462 15.7941 45.345C15.8143 45.1642 16.1176 45.847 16.4816 46.8711C16.8657 47.8952 17.5127 49.4213 17.9373 50.2848Z" fill="#3D3D3D"/>
      <path d="M50.0649 68.2166C49.4988 68.3572 49.519 68.3772 50.3278 68.3973C50.8737 68.4174 51.1568 68.3371 51.0759 68.2166C50.9344 67.9957 50.9344 67.9957 50.0649 68.2166Z" fill="#3D3D3D"/>
      <path d="M48.6091 68.3571C48.7911 68.3972 49.0741 68.3972 49.2157 68.3571C49.337 68.2968 49.1954 68.2567 48.8517 68.2567C48.5282 68.2567 48.4069 68.2968 48.6091 68.3571Z" fill="#3D3D3D"/>
      <path d="M47.4971 68.5579C47.6387 68.6181 47.8207 68.598 47.8813 68.5378C47.9622 68.4775 47.8409 68.4173 47.6185 68.4374C47.3961 68.4374 47.3354 68.4976 47.4971 68.5579Z" fill="#3D3D3D"/>
      <path d="M38.9337 25.6665C38.5354 27.8567 34.6055 32.3841 33.2507 34.0923C32.1495 35.4808 30.9791 36.8144 29.8807 38.1975C28.329 40.1515 31.1982 41.4577 32.6073 42.4865C35.1894 44.3718 36.9504 46.7718 38.9337 49.1958C39.189 49.5079 41.0016 51.2501 41.0016 51.0033" stroke="#3D3D3D" strokeWidth="11" strokeLinecap="round"/>
      <path d="M32.1787 38.5958C32.5983 39.8545 38.2623 39.1557 39.225 39.1319C42.1726 39.0591 45.4126 38.8341 48.3238 38.3047C49.6432 38.0649 51.0565 37.904 52.4076 37.7689C53.4662 37.663 54.3058 37.7686 55.3395 37.7686C58.3534 37.7686 61.5214 37.7686 64.7141 37.7686" stroke="#3D3D3D" strokeWidth="11" strokeLinecap="round"/>
      <defs>
        <filter id="filter0_d_188_1393" x="0.570312" y="0.12207" width="91.752" height="92.0903" filterUnits="userSpaceOnUse" colorInterpolationFilters="sRGB">
          <feFlood floodOpacity="0" result="BackgroundImageFix"/>
          <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
          <feOffset dy="9"/>
          <feGaussianBlur stdDeviation="6.5"/>
          <feComposite in2="hardAlpha" operator="out"/>
          <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_188_1393"/>
          <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_188_1393" result="shape"/>
        </filter>
      </defs>
    </svg>
  )
}

function RightNavArrowSvg() {
  return (
    <svg viewBox="0 0 93 93" fill="none" xmlns="http://www.w3.org/2000/svg">
      <g filter="url(#filter0_d_188_1384)">
        <path d="M79.1553 37.4181C81.1266 55.6413 65.3559 71.0783 46.5524 70.1747C29.341 69.6476 13.5703 55.4416 13.5703 37.2675C18.5745 7.22179 33.3595 2.92952 46.5524 4.36029C64.8516 4.36029 79.1553 19.244 79.1553 37.4181Z" fill="#E2E2E2"/>
      </g>
      <path d="M40.259 3.25587C35.1234 3.97877 29.7856 6.1274 26.0855 8.9387C23.8412 10.6456 20.8691 13.7179 19.4335 15.8464C18.1799 17.6738 15.8346 22.2522 15.4302 23.6377C15.3291 24.0193 15.046 24.9631 14.8236 25.7462C13.5903 29.9431 12.9433 33.7584 13.0039 36.4492C13.0241 38.0155 13.0443 38.0757 13.1454 37.0918C13.2465 36.1681 13.3072 36.4291 13.4487 38.6982C13.6711 42.1722 13.8935 44.7024 13.9542 44.3208C14.0149 43.7787 14.2979 44.5016 14.8843 46.7908C16.7242 54.06 21.1117 60.2448 27.2987 64.3212C29.7451 65.9276 31.302 66.6706 34.2944 67.6345C35.7501 68.0964 37.2463 68.5984 37.6305 68.7389L38.3382 69H37.6305C36.842 69.0201 35.1234 68.5984 34.4157 68.2369C34.1731 68.0964 33.8091 67.9558 33.6272 67.9156C32.8993 67.755 29.7856 66.3694 28.8353 65.767C28.2894 65.4256 27.5008 64.9638 27.1167 64.7429C26.0249 64.1204 24.3871 62.7348 22.1631 60.6063C19.8177 58.3572 19.4133 57.9155 19.3526 57.5138C19.3324 57.3733 18.928 56.7909 18.463 56.2488C17.998 55.7066 17.6138 55.1644 17.6138 55.064C17.6138 54.9435 17.4318 54.5017 17.2094 54.06C16.987 53.6182 16.8051 53.1965 16.8051 53.0961C16.8051 52.9957 16.6433 52.6744 16.4411 52.3933C15.9154 51.6302 15.2482 49.7426 14.6619 47.4133C14.2373 45.6462 14.1968 45.5658 14.2979 46.6301C14.4597 48.2566 15.5919 51.59 16.8455 54.1403C19.5346 59.6022 24.5691 64.4015 30.655 67.2931C36.5387 70.1044 42.2808 71.2089 49.7618 70.9679C54.857 70.7872 58.3346 69.9237 62.5199 67.7751C67.7769 65.0642 71.4163 61.6505 75.3387 55.7668C78.2705 51.3692 79.8071 47.8952 80.6361 43.8991C81.1213 41.4895 81.1213 36.0677 80.6361 33.3769C79.6049 27.8748 76.936 22.2923 72.7507 16.8706C72.3868 16.4087 71.76 15.5452 71.3354 14.9629C69.5966 12.493 65.1282 8.55716 62.7019 7.33224C62.1964 7.07119 61.5697 6.72982 61.2866 6.5491C60.5183 6.08724 57.9707 5.08321 55.9286 4.46071C54.9379 4.1595 53.9674 3.87837 53.8056 3.81813C51.3187 3.05506 43.8377 2.73377 40.259 3.25587ZM42.6852 4.44063C42.6852 4.48079 42.018 4.62135 41.2295 4.76192C37.7316 5.32418 33.1824 7.23184 29.4419 9.70176C27.5211 10.9668 22.7292 14.9227 20.9499 16.6898L19.3324 18.3164L20.3231 16.9107C20.8691 16.1477 21.6374 15.1235 22.0417 14.6215C23.174 13.236 26.3484 10.1837 27.0156 9.84233C27.3593 9.6616 28.0265 9.21983 28.532 8.83829C30.7156 7.1716 35.9321 5.20369 39.4502 4.68159C41.4721 4.40047 42.6852 4.30006 42.6852 4.44063ZM52.087 5.68563C53.199 5.86635 54.2504 6.06716 54.4122 6.1274C54.8368 6.28805 54.857 6.28805 55.5242 6.46877C56.98 6.85031 59.75 8.11539 62.7221 9.74192C64.5216 10.7259 68.6665 13.6978 68.8485 14.1597C68.9091 14.3002 68.4845 14.0593 67.8982 13.6175C63.814 10.5853 57.9707 8.17563 52.6329 7.33224C47.5175 6.50894 40.7846 6.79006 36.478 7.97482C34.6583 8.47684 34.4966 8.47684 35.4671 7.95474C36.8217 7.23184 42.1393 5.58522 43.6962 5.4045C45.6776 5.16353 49.5596 5.28401 52.087 5.68563ZM48.8115 8.17563C53.4012 8.55716 58.4357 9.88249 62.0953 11.6897C63.3287 12.2922 64.7036 13.0552 65.1888 13.3966C65.6539 13.738 66.5435 14.3605 67.1501 14.7822C68.0801 15.4448 70.5266 17.7541 72.0228 19.3405C72.5485 19.9228 74.2873 22.5534 74.7726 23.5373C76.0868 26.1478 77.0371 31.0877 77.1584 35.887C77.2191 38.1561 76.8551 41.8308 76.471 43.0156C76.3699 43.3369 76.1677 44.3008 76.0464 45.104C75.9251 45.9273 75.6622 46.9715 75.46 47.4133C75.2578 47.8751 75.0354 48.4775 74.9748 48.7787C74.6108 50.1643 71.8813 55.2447 70.8299 56.4696C70.6479 56.6905 70.284 57.1323 70.0211 57.4737C69.455 58.1966 64.926 62.7951 64.744 62.8151C64.1779 62.8754 63.915 63.0159 63.4702 63.4577C62.4997 64.4216 57.6674 66.6104 54.8772 67.3333C53.0373 67.8152 52.6127 67.9759 53.3608 67.9156C55.2614 67.7148 58.2538 66.7108 61.2664 65.2248C67.6758 62.1123 73.1955 55.6062 75.9453 47.9554C77.1584 44.5618 78.048 39.3609 78.0683 35.6058C78.0683 34.7223 78.1289 34.0596 78.1896 34.1399C78.3513 34.3006 78.3109 41.6903 78.1491 42.9152C77.6841 46.4695 76.8956 49.3611 75.642 52.0519C73.984 55.6664 73.0944 57.2327 71.8408 58.7789C70.4255 60.5059 66.8063 63.8392 65.7954 64.3613C65.4719 64.522 65.0473 64.8031 64.8249 65.0039C64.1375 65.5863 62.3784 66.5702 61.4686 66.8915C60.9833 67.0522 60.0735 67.3935 59.4669 67.6345C58.8603 67.8554 57.9505 68.1767 57.445 68.3373C56.9395 68.4779 55.9488 68.7791 55.2209 69.0201C53.0777 69.6827 44.424 69.8434 44.8284 69.2008C44.8891 69.1004 44.5251 69.0201 44.0399 69.0201C41.836 69.0201 36.8217 67.1124 33.1217 64.8834C28.6331 62.1525 24.5691 58.2769 21.6172 53.8592C20.3838 52.0117 17.6138 46.8309 17.6138 46.3691C17.6138 46.2687 17.351 45.3249 17.0275 44.3008C15.6728 39.9232 15.4504 34.2604 16.4816 30.0636C17.3914 26.3687 17.5734 25.8667 18.928 23.3165C21.0308 19.4007 24.5085 15.1838 27.1167 13.3966C31.2009 10.6255 37.3474 8.65757 43.3929 8.19571C46.3044 7.95474 46.2033 7.95474 48.8115 8.17563ZM70.3851 15.5051C70.6479 15.7862 70.8097 16.0071 70.749 16.0071C70.7086 16.0071 70.4457 15.7862 70.1829 15.5051C69.9201 15.2239 69.7583 15.0031 69.819 15.0031C69.8594 15.0031 70.1222 15.2239 70.3851 15.5051ZM78.8972 28.8587C80.0093 32.1319 80.4743 35.2845 80.5147 39.6019C80.535 42.1722 80.4743 43.1963 80.3126 43.3168C80.171 43.3971 80.0295 43.9393 79.9688 44.5417C79.9082 45.1441 79.6858 46.0679 79.4836 46.6301C79.2612 47.1723 78.9983 48.0358 78.8568 48.5378C78.6142 49.5016 77.3202 52.2929 77.0371 52.4736C76.936 52.5338 77.0371 52.1925 77.2393 51.7105C78.6546 48.3771 79.4634 44.5819 79.6251 40.4051C79.8677 34.2403 78.877 28.939 76.6529 24.3205C76.4305 23.8787 76.2486 23.4169 76.2688 23.3165C76.289 22.9952 78.4322 27.5133 78.8972 28.8587ZM78.0076 33.7182C77.9469 33.8789 77.8863 33.8186 77.8863 33.5978C77.8661 33.3769 77.9267 33.2564 77.9874 33.3367C78.048 33.397 78.0683 33.5777 78.0076 33.7182ZM17.9373 50.2848C20.2625 55.064 24.8724 60.6464 28.997 63.6585C30.473 64.7429 30.6954 64.9838 29.7249 64.4818C27.7839 63.4979 24.65 60.787 21.7789 57.6142C20.5253 56.2086 18.2406 52.3531 17.4723 50.345C16.5422 47.9153 15.7941 45.6462 15.7941 45.345C15.8143 45.1642 16.1176 45.847 16.4816 46.8711C16.8657 47.8952 17.5127 49.4213 17.9373 50.2848Z" fill="#3D3D3D"/>
      <path d="M50.0654 68.2166C49.4993 68.3572 49.5195 68.3772 50.3283 68.3973C50.8742 68.4174 51.1573 68.3371 51.0764 68.2166C50.9348 67.9957 50.9348 67.9957 50.0654 68.2166Z" fill="#3D3D3D"/>
      <path d="M48.6096 68.3571C48.7916 68.3972 49.0746 68.3972 49.2162 68.3571C49.3375 68.2968 49.1959 68.2567 48.8522 68.2567C48.5287 68.2567 48.4074 68.2968 48.6096 68.3571Z" fill="#3D3D3D"/>
      <path d="M47.4976 68.5579C47.6392 68.6181 47.8211 68.598 47.8818 68.5378C47.9627 68.4775 47.8414 68.4173 47.619 68.4374C47.3965 68.4374 47.3359 68.4976 47.4976 68.5579Z" fill="#3D3D3D"/>
      <path d="M55.2133 25.6665C55.6115 27.8567 59.5415 32.3841 60.8963 34.0923C61.9975 35.4808 63.1679 36.8144 64.2662 38.1975C65.8179 40.1515 62.9487 41.4577 61.5396 42.4865C58.9576 44.3718 57.1966 46.7718 55.2133 49.1958C54.9579 49.5079 53.1454 51.2501 53.1454 51.0033" stroke="#3D3D3D" strokeWidth="11" strokeLinecap="round"/>
      <path d="M61.9688 38.5958C61.5492 39.8545 55.8852 39.1557 54.9225 39.1319C51.9748 39.0591 48.7348 38.8341 45.8236 38.3047C44.5043 38.0649 43.091 37.904 41.7398 37.7689C40.6813 37.663 39.8417 37.7686 38.808 37.7686C35.7941 37.7686 32.6261 37.7686 29.4334 37.7686" stroke="#3D3D3D" strokeWidth="11" strokeLinecap="round"/>
      <defs>
        <filter id="filter0_d_188_1384" x="0.570312" y="0.12207" width="91.752" height="92.0903" filterUnits="userSpaceOnUse" colorInterpolationFilters="sRGB">
          <feFlood floodOpacity="0" result="BackgroundImageFix"/>
          <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
          <feOffset dy="9"/>
          <feGaussianBlur stdDeviation="6.5"/>
          <feComposite in2="hardAlpha" operator="out"/>
          <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_188_1384"/>
          <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_188_1384" result="shape"/>
        </filter>
      </defs>
    </svg>
  )
}
